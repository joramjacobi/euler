# Project Euler Problem 12: Highly Divisible Triangular Number
# User: jmjacobi
#
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
# ten terms would be:
#       1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
#
# Answer: 76576500
# Execution time: 77.5 seconds

DIVISORS_LIMIT = 500

def countDivisors(num)
  i = 1
  count = 0
  while i <= Math.sqrt(num).floor
    if i == Math.sqrt(num)
      count += 1
    elsif (num % i) == 0
      count += 2
    end
    i += 1
  end
  return count
end

index = 1
tri_num = 0

start_time = Time.now()

while true
  tri_num += index
  index += 1
  
  num_div = countDivisors(tri_num)
  if (num_div > DIVISORS_LIMIT)
    puts "#{tri_num} has #{num_div} divisors."
    break;
  end
end

end_time = Time.now()
puts "Execution time = #{end_time - start_time} seconds."
